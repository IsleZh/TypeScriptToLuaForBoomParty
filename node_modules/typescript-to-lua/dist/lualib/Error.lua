function __TS__GetErrorStack(self, constructor)
    local level = 1
    while true do
        local info = debug.getinfo(level, "f")
        level = level + 1
        if not info then
            level = 1
            break
        elseif info.func == constructor then
            break
        end
    end
    return debug.traceback(nil, level)
end
function __TS__WrapErrorToString(self, getDescription)
    return function(self)
        local description = getDescription(self)
        local caller = debug.getinfo(3, "f")
        if _VERSION == "Lua 5.1" or caller and caller.func ~= error then
            return description
        else
            return (tostring(description) .. "\n") .. self.stack
        end
    end
end
function __TS__InitErrorClass(self, Type, name)
    Type.name = name
    return setmetatable(
        Type,
        {__call = function(____, _self, message) return __TS__New(Type, message) end}
    )
end
local ____TS__InitErrorClass_3 = __TS__InitErrorClass
local ____G_2 = _G
____class_0 = __TS__Class()
____class_0.name = ""
function ____class_0.prototype.____constructor(self, message)
    if message == nil then
        message = ""
    end
    self.message = message
    self.name = "Error"
    self.stack = __TS__GetErrorStack(_G, self.constructor.new)
    local metatable = getmetatable(self)
    if not metatable.__errorToStringPatched then
        metatable.__errorToStringPatched = true
        metatable.__tostring = __TS__WrapErrorToString(_G, metatable.__tostring)
    end
end
function ____class_0.prototype.__tostring(self)
    local ____temp_1
    if self.message ~= "" then
        ____temp_1 = (self.name .. ": ") .. self.message
    else
        ____temp_1 = self.name
    end
    return ____temp_1
end
Error = ____TS__InitErrorClass_3(____G_2, ____class_0, "Error")
for ____, errorName in ipairs({
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
}) do
    local ____G_7 = _G
    local ____TS__InitErrorClass_6 = __TS__InitErrorClass
    local ____G_5 = _G
    local ____class_4 = __TS__Class()
    ____class_4.name = ____class_4.name
    __TS__ClassExtends(____class_4, Error)
    function ____class_4.prototype.____constructor(self, ...)
        Error.prototype.____constructor(self, ...)
        self.name = errorName
    end
    ____G_7[errorName] = ____TS__InitErrorClass_6(____G_5, ____class_4, errorName)
end
