__TS__parseInt_base_pattern = "0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTvVwWxXyYzZ"
function __TS__ParseInt(numberString, base)
    if base == nil then
        base = 10
        local hexMatch = string.match(numberString, "^%s*-?0[xX]")
        if hexMatch then
            base = 16
            local ____string_match_result__0_0
            if string.match(hexMatch, "-") then
                ____string_match_result__0_0 = "-" .. __TS__StringSubstr(numberString, #hexMatch)
            else
                ____string_match_result__0_0 = __TS__StringSubstr(numberString, #hexMatch)
            end
            numberString = ____string_match_result__0_0
        end
    end
    if base < 2 or base > 36 then
        return 0 / 0
    end
    local ____temp_1
    if base <= 10 then
        ____temp_1 = __TS__StringSubstring(__TS__parseInt_base_pattern, 0, base)
    else
        ____temp_1 = __TS__StringSubstr(__TS__parseInt_base_pattern, 0, 10 + 2 * (base - 10))
    end
    local allowedDigits = ____temp_1
    local pattern = ("^%s*(-?[" .. allowedDigits) .. "]*)"
    local number = tonumber(
        string.match(numberString, pattern),
        base
    )
    if number == nil then
        return 0 / 0
    end
    if number >= 0 then
        return math.floor(number)
    else
        return math.ceil(number)
    end
end
