function __TS__AsyncAwaiter(generator)
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            local adopt, fulfilled, rejected, step, asyncCoroutine
            function adopt(self, value)
                local ____temp_0
                if __TS__InstanceOf(value, __TS__Promise) then
                    ____temp_0 = value
                else
                    ____temp_0 = __TS__Promise.resolve(value)
                end
                return ____temp_0
            end
            function fulfilled(self, value)
                local success, errorOrErrorHandler, resultOrError = coroutine.resume(asyncCoroutine, value)
                if success then
                    step(_G, resultOrError, errorOrErrorHandler)
                else
                    reject(_G, errorOrErrorHandler)
                end
            end
            function rejected(self, handler)
                if handler then
                    return function(____, value)
                        local success, hasReturnedOrError, returnedValue = pcall(handler, value)
                        if success then
                            if hasReturnedOrError then
                                resolve(_G, returnedValue)
                            else
                                step(_G, hasReturnedOrError, handler)
                            end
                        else
                            reject(_G, hasReturnedOrError)
                        end
                    end
                else
                    return function(____, value)
                        reject(_G, value)
                    end
                end
            end
            function step(self, result, errorHandler)
                if coroutine.status(asyncCoroutine) == "dead" then
                    resolve(_G, result)
                else
                    local ____self_1 = adopt(_G, result)
                    ____self_1["then"](
                        ____self_1,
                        fulfilled,
                        rejected(_G, errorHandler)
                    )
                end
            end
            asyncCoroutine = coroutine.create(generator)
            local success, errorOrErrorHandler, resultOrError = coroutine.resume(asyncCoroutine)
            if success then
                step(_G, resultOrError, errorOrErrorHandler)
            else
                reject(_G, errorOrErrorHandler)
            end
        end
    )
end
function __TS__Await(errorHandler, thing)
    return coroutine.yield(errorHandler, thing)
end
