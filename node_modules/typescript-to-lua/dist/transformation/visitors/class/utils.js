"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtendedType = exports.getExtendedNode = exports.getExtendsClause = exports.isStaticNode = void 0;
const ts = require("typescript");
const annotations_1 = require("../../utils/annotations");
const diagnostics_1 = require("../../utils/diagnostics");
function isStaticNode(node) {
    var _a;
    return ((_a = node.modifiers) !== null && _a !== void 0 ? _a : []).some(m => m.kind === ts.SyntaxKind.StaticKeyword);
}
exports.isStaticNode = isStaticNode;
function getExtendsClause(node) {
    var _a;
    return ((_a = node.heritageClauses) !== null && _a !== void 0 ? _a : []).find(clause => clause.token === ts.SyntaxKind.ExtendsKeyword);
}
exports.getExtendsClause = getExtendsClause;
function getExtendedNode(context, node) {
    const extendsClause = getExtendsClause(node);
    if (!extendsClause)
        return;
    const superType = context.checker.getTypeAtLocation(extendsClause.types[0]);
    const annotations = (0, annotations_1.getTypeAnnotations)(superType);
    if (annotations.has(annotations_1.AnnotationKind.PureAbstract)) {
        context.diagnostics.push((0, diagnostics_1.annotationRemoved)(extendsClause, annotations_1.AnnotationKind.PureAbstract));
    }
    return extendsClause.types[0];
}
exports.getExtendedNode = getExtendedNode;
function getExtendedType(context, node) {
    const extendedNode = getExtendedNode(context, node);
    return extendedNode && context.checker.getTypeAtLocation(extendedNode);
}
exports.getExtendedType = getExtendedType;
//# sourceMappingURL=utils.js.map