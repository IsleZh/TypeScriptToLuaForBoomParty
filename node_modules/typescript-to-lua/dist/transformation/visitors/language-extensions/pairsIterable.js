"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformForOfPairsIterableStatement = exports.isPairsIterableExpression = void 0;
const ts = require("typescript");
const lua = require("../../../LuaAST");
const utils_1 = require("../../../utils");
const diagnostics_1 = require("../../utils/diagnostics");
const extensions = require("../../utils/language-extensions");
const utils_2 = require("../loops/utils");
const variable_declaration_1 = require("../variable-declaration");
function isPairsIterableType(type) {
    return extensions.isExtensionType(type, extensions.ExtensionKind.PairsIterableType);
}
function isPairsIterableExpression(context, expression) {
    const type = context.checker.getTypeAtLocation(expression);
    return isPairsIterableType(type);
}
exports.isPairsIterableExpression = isPairsIterableExpression;
function transformForOfPairsIterableStatement(context, statement, block) {
    const pairsCall = lua.createCallExpression(lua.createIdentifier("pairs"), [
        context.transformExpression(statement.expression),
    ]);
    let identifiers = [];
    if (ts.isVariableDeclarationList(statement.initializer)) {
        // Variables declared in for loop
        // for key, value in iterable do
        const binding = (0, utils_2.getVariableDeclarationBinding)(context, statement.initializer);
        if (ts.isArrayBindingPattern(binding)) {
            identifiers = binding.elements.map(e => (0, variable_declaration_1.transformArrayBindingElement)(context, e));
        }
        else {
            context.diagnostics.push((0, diagnostics_1.invalidPairsIterableWithoutDestructuring)(binding));
        }
    }
    else if (ts.isArrayLiteralExpression(statement.initializer)) {
        // Variables NOT declared in for loop - catch iterator values in temps and assign
        // for ____key, ____value in iterable do
        //     key, value = ____key, ____value
        identifiers = statement.initializer.elements.map(e => context.createTempNameForNode(e));
        if (identifiers.length > 0) {
            block.statements.unshift(lua.createAssignmentStatement(statement.initializer.elements.map(e => (0, utils_1.cast)(context.transformExpression(e), lua.isAssignmentLeftHandSideExpression)), identifiers));
        }
    }
    else {
        context.diagnostics.push((0, diagnostics_1.invalidPairsIterableWithoutDestructuring)(statement.initializer));
    }
    if (identifiers.length === 0) {
        identifiers.push(lua.createAnonymousIdentifier());
    }
    return lua.createForInStatement(block, identifiers, [pairsCall], statement);
}
exports.transformForOfPairsIterableStatement = transformForOfPairsIterableStatement;
//# sourceMappingURL=pairsIterable.js.map