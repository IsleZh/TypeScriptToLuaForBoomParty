"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformIfStatement = exports.transformConditionalExpression = void 0;
const ts = require("typescript");
const lua = require("../../LuaAST");
const preceding_statements_1 = require("../utils/preceding-statements");
const scope_1 = require("../utils/scope");
const block_1 = require("./block");
const typescript_1 = require("../utils/typescript");
function transformProtectedConditionalExpression(context, expression) {
    const tempVar = context.createTempNameForNode(expression.condition);
    const condition = context.transformExpression(expression.condition);
    const [trueStatements, val1] = (0, preceding_statements_1.transformInPrecedingStatementScope)(context, () => context.transformExpression(expression.whenTrue));
    trueStatements.push(lua.createAssignmentStatement(lua.cloneIdentifier(tempVar), val1, expression.whenTrue));
    const [falseStatements, val2] = (0, preceding_statements_1.transformInPrecedingStatementScope)(context, () => context.transformExpression(expression.whenFalse));
    falseStatements.push(lua.createAssignmentStatement(lua.cloneIdentifier(tempVar), val2, expression.whenFalse));
    context.addPrecedingStatements([
        lua.createVariableDeclarationStatement(tempVar, undefined, expression.condition),
        lua.createIfStatement(condition, lua.createBlock(trueStatements, expression.whenTrue), lua.createBlock(falseStatements, expression.whenFalse), expression),
    ]);
    return lua.cloneIdentifier(tempVar);
}
const transformConditionalExpression = (expression, context) => {
    if ((0, typescript_1.canBeFalsy)(context, context.checker.getTypeAtLocation(expression.whenTrue))) {
        return transformProtectedConditionalExpression(context, expression);
    }
    const condition = context.transformExpression(expression.condition);
    const val1 = context.transformExpression(expression.whenTrue);
    const val2 = context.transformExpression(expression.whenFalse);
    // condition and v1 or v2
    const conditionAnd = lua.createBinaryExpression(condition, val1, lua.SyntaxKind.AndOperator);
    return lua.createBinaryExpression(conditionAnd, val2, lua.SyntaxKind.OrOperator, expression);
};
exports.transformConditionalExpression = transformConditionalExpression;
function transformIfStatement(statement, context) {
    (0, scope_1.pushScope)(context, scope_1.ScopeType.Conditional);
    const condition = context.transformExpression(statement.expression);
    const statements = (0, scope_1.performHoisting)(context, (0, block_1.transformBlockOrStatement)(context, statement.thenStatement));
    (0, scope_1.popScope)(context);
    const ifBlock = lua.createBlock(statements);
    if (statement.elseStatement) {
        if (ts.isIfStatement(statement.elseStatement)) {
            const tsElseStatement = statement.elseStatement;
            const [precedingStatements, elseStatement] = (0, preceding_statements_1.transformInPrecedingStatementScope)(context, () => transformIfStatement(tsElseStatement, context));
            // If else-if condition generates preceding statements, we can't use elseif, we have to break it down:
            // if conditionA then
            //     ...
            // else
            //     conditionB's preceding statements
            //     if conditionB then
            //     end
            // end
            if (precedingStatements.length > 0) {
                const elseBlock = lua.createBlock([...precedingStatements, elseStatement]);
                return lua.createIfStatement(condition, ifBlock, elseBlock);
            }
            else {
                return lua.createIfStatement(condition, ifBlock, elseStatement);
            }
        }
        else {
            (0, scope_1.pushScope)(context, scope_1.ScopeType.Conditional);
            const elseStatements = (0, scope_1.performHoisting)(context, (0, block_1.transformBlockOrStatement)(context, statement.elseStatement));
            (0, scope_1.popScope)(context);
            const elseBlock = lua.createBlock(elseStatements);
            return lua.createIfStatement(condition, ifBlock, elseBlock);
        }
    }
    return lua.createIfStatement(condition, ifBlock);
}
exports.transformIfStatement = transformIfStatement;
//# sourceMappingURL=conditional.js.map