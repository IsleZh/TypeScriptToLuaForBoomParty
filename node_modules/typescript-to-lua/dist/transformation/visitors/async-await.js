"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapInAsyncAwaiter = exports.isAsyncFunction = exports.transformAwaitExpression = void 0;
const ts = require("typescript");
const lua = require("../../LuaAST");
const diagnostics_1 = require("../utils/diagnostics");
const lualib_1 = require("../utils/lualib");
const typescript_1 = require("../utils/typescript");
const transformAwaitExpression = (node, context) => {
    var _a;
    // Check if await is inside an async function, it is not allowed at top level or in non-async functions
    const containingFunction = (0, typescript_1.findFirstNodeAbove)(node, ts.isFunctionLike);
    if (containingFunction === undefined ||
        !((_a = containingFunction.modifiers) === null || _a === void 0 ? void 0 : _a.some(m => m.kind === ts.SyntaxKind.AsyncKeyword))) {
        context.diagnostics.push((0, diagnostics_1.awaitMustBeInAsyncFunction)(node));
    }
    const expression = context.transformExpression(node.expression);
    const catchIdentifier = lua.createIdentifier("____catch");
    return (0, lualib_1.transformLuaLibFunction)(context, lualib_1.LuaLibFeature.Await, node, catchIdentifier, expression);
};
exports.transformAwaitExpression = transformAwaitExpression;
function isAsyncFunction(declaration) {
    var _a, _b;
    return (_b = (_a = declaration.modifiers) === null || _a === void 0 ? void 0 : _a.some(m => m.kind === ts.SyntaxKind.AsyncKeyword)) !== null && _b !== void 0 ? _b : false;
}
exports.isAsyncFunction = isAsyncFunction;
function wrapInAsyncAwaiter(context, statements) {
    (0, lualib_1.importLuaLibFeature)(context, lualib_1.LuaLibFeature.Await);
    return [
        lua.createReturnStatement([
            lua.createCallExpression(lua.createIdentifier("__TS__AsyncAwaiter"), [
                lua.createFunctionExpression(lua.createBlock(statements)),
            ]),
        ]),
    ];
}
exports.wrapInAsyncAwaiter = wrapInAsyncAwaiter;
//# sourceMappingURL=async-await.js.map