"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExtensionValue = exports.getExtensionKinds = exports.isExtensionType = exports.ExtensionKind = void 0;
var ExtensionKind;
(function (ExtensionKind) {
    ExtensionKind["MultiFunction"] = "MultiFunction";
    ExtensionKind["MultiType"] = "MultiType";
    ExtensionKind["RangeFunction"] = "RangeFunction";
    ExtensionKind["VarargConstant"] = "VarargConstant";
    ExtensionKind["IterableType"] = "IterableType";
    ExtensionKind["PairsIterableType"] = "PairsIterableType";
    ExtensionKind["AdditionOperatorType"] = "AdditionOperatorType";
    ExtensionKind["AdditionOperatorMethodType"] = "AdditionOperatorMethodType";
    ExtensionKind["SubtractionOperatorType"] = "SubtractionOperatorType";
    ExtensionKind["SubtractionOperatorMethodType"] = "SubtractionOperatorMethodType";
    ExtensionKind["MultiplicationOperatorType"] = "MultiplicationOperatorType";
    ExtensionKind["MultiplicationOperatorMethodType"] = "MultiplicationOperatorMethodType";
    ExtensionKind["DivisionOperatorType"] = "DivisionOperatorType";
    ExtensionKind["DivisionOperatorMethodType"] = "DivisionOperatorMethodType";
    ExtensionKind["ModuloOperatorType"] = "ModuloOperatorType";
    ExtensionKind["ModuloOperatorMethodType"] = "ModuloOperatorMethodType";
    ExtensionKind["PowerOperatorType"] = "PowerOperatorType";
    ExtensionKind["PowerOperatorMethodType"] = "PowerOperatorMethodType";
    ExtensionKind["FloorDivisionOperatorType"] = "FloorDivisionOperatorType";
    ExtensionKind["FloorDivisionOperatorMethodType"] = "FloorDivisionOperatorMethodType";
    ExtensionKind["BitwiseAndOperatorType"] = "BitwiseAndOperatorType";
    ExtensionKind["BitwiseAndOperatorMethodType"] = "BitwiseAndOperatorMethodType";
    ExtensionKind["BitwiseOrOperatorType"] = "BitwiseOrOperatorType";
    ExtensionKind["BitwiseOrOperatorMethodType"] = "BitwiseOrOperatorMethodType";
    ExtensionKind["BitwiseExclusiveOrOperatorType"] = "BitwiseExclusiveOrOperatorType";
    ExtensionKind["BitwiseExclusiveOrOperatorMethodType"] = "BitwiseExclusiveOrOperatorMethodType";
    ExtensionKind["BitwiseLeftShiftOperatorType"] = "BitwiseLeftShiftOperatorType";
    ExtensionKind["BitwiseLeftShiftOperatorMethodType"] = "BitwiseLeftShiftOperatorMethodType";
    ExtensionKind["BitwiseRightShiftOperatorType"] = "BitwiseRightShiftOperatorType";
    ExtensionKind["BitwiseRightShiftOperatorMethodType"] = "BitwiseRightShiftOperatorMethodType";
    ExtensionKind["ConcatOperatorType"] = "ConcatOperatorType";
    ExtensionKind["ConcatOperatorMethodType"] = "ConcatOperatorMethodType";
    ExtensionKind["LessThanOperatorType"] = "LessThanOperatorType";
    ExtensionKind["LessThanOperatorMethodType"] = "LessThanOperatorMethodType";
    ExtensionKind["GreaterThanOperatorType"] = "GreaterThanOperatorType";
    ExtensionKind["GreaterThanOperatorMethodType"] = "GreaterThanOperatorMethodType";
    ExtensionKind["NegationOperatorType"] = "NegationOperatorType";
    ExtensionKind["NegationOperatorMethodType"] = "NegationOperatorMethodType";
    ExtensionKind["BitwiseNotOperatorType"] = "BitwiseNotOperatorType";
    ExtensionKind["BitwiseNotOperatorMethodType"] = "BitwiseNotOperatorMethodType";
    ExtensionKind["LengthOperatorType"] = "LengthOperatorType";
    ExtensionKind["LengthOperatorMethodType"] = "LengthOperatorMethodType";
    ExtensionKind["TableNewType"] = "TableNewType";
    ExtensionKind["TableDeleteType"] = "TableDeleteType";
    ExtensionKind["TableDeleteMethodType"] = "TableDeleteMethodType";
    ExtensionKind["TableGetType"] = "TableGetType";
    ExtensionKind["TableGetMethodType"] = "TableGetMethodType";
    ExtensionKind["TableHasType"] = "TableHasType";
    ExtensionKind["TableHasMethodType"] = "TableHasMethodType";
    ExtensionKind["TableSetType"] = "TableSetType";
    ExtensionKind["TableSetMethodType"] = "TableSetMethodType";
})(ExtensionKind = exports.ExtensionKind || (exports.ExtensionKind = {}));
const extensionKindToValueName = {
    [ExtensionKind.MultiFunction]: "$multi",
    [ExtensionKind.RangeFunction]: "$range",
    [ExtensionKind.VarargConstant]: "$vararg",
};
const extensionKindToTypeBrand = {
    [ExtensionKind.MultiFunction]: "__luaMultiFunctionBrand",
    [ExtensionKind.MultiType]: "__luaMultiReturnBrand",
    [ExtensionKind.RangeFunction]: "__luaRangeFunctionBrand",
    [ExtensionKind.VarargConstant]: "__luaVarargConstantBrand",
    [ExtensionKind.IterableType]: "__luaIterableBrand",
    [ExtensionKind.PairsIterableType]: "__luaPairsIterableBrand",
    [ExtensionKind.AdditionOperatorType]: "__luaAdditionBrand",
    [ExtensionKind.AdditionOperatorMethodType]: "__luaAdditionMethodBrand",
    [ExtensionKind.SubtractionOperatorType]: "__luaSubtractionBrand",
    [ExtensionKind.SubtractionOperatorMethodType]: "__luaSubtractionMethodBrand",
    [ExtensionKind.MultiplicationOperatorType]: "__luaMultiplicationBrand",
    [ExtensionKind.MultiplicationOperatorMethodType]: "__luaMultiplicationMethodBrand",
    [ExtensionKind.DivisionOperatorType]: "__luaDivisionBrand",
    [ExtensionKind.DivisionOperatorMethodType]: "__luaDivisionMethodBrand",
    [ExtensionKind.ModuloOperatorType]: "__luaModuloBrand",
    [ExtensionKind.ModuloOperatorMethodType]: "__luaModuloMethodBrand",
    [ExtensionKind.PowerOperatorType]: "__luaPowerBrand",
    [ExtensionKind.PowerOperatorMethodType]: "__luaPowerMethodBrand",
    [ExtensionKind.FloorDivisionOperatorType]: "__luaFloorDivisionBrand",
    [ExtensionKind.FloorDivisionOperatorMethodType]: "__luaFloorDivisionMethodBrand",
    [ExtensionKind.BitwiseAndOperatorType]: "__luaBitwiseAndBrand",
    [ExtensionKind.BitwiseAndOperatorMethodType]: "__luaBitwiseAndMethodBrand",
    [ExtensionKind.BitwiseOrOperatorType]: "__luaBitwiseOrBrand",
    [ExtensionKind.BitwiseOrOperatorMethodType]: "__luaBitwiseOrMethodBrand",
    [ExtensionKind.BitwiseExclusiveOrOperatorType]: "__luaBitwiseExclusiveOrBrand",
    [ExtensionKind.BitwiseExclusiveOrOperatorMethodType]: "__luaBitwiseExclusiveOrMethodBrand",
    [ExtensionKind.BitwiseLeftShiftOperatorType]: "__luaBitwiseLeftShiftBrand",
    [ExtensionKind.BitwiseLeftShiftOperatorMethodType]: "__luaBitwiseLeftShiftMethodBrand",
    [ExtensionKind.BitwiseRightShiftOperatorType]: "__luaBitwiseRightShiftBrand",
    [ExtensionKind.BitwiseRightShiftOperatorMethodType]: "__luaBitwiseRightShiftMethodBrand",
    [ExtensionKind.ConcatOperatorType]: "__luaConcatBrand",
    [ExtensionKind.ConcatOperatorMethodType]: "__luaConcatMethodBrand",
    [ExtensionKind.LessThanOperatorType]: "__luaLessThanBrand",
    [ExtensionKind.LessThanOperatorMethodType]: "__luaLessThanMethodBrand",
    [ExtensionKind.GreaterThanOperatorType]: "__luaGreaterThanBrand",
    [ExtensionKind.GreaterThanOperatorMethodType]: "__luaGreaterThanMethodBrand",
    [ExtensionKind.NegationOperatorType]: "__luaNegationBrand",
    [ExtensionKind.NegationOperatorMethodType]: "__luaNegationMethodBrand",
    [ExtensionKind.BitwiseNotOperatorType]: "__luaBitwiseNotBrand",
    [ExtensionKind.BitwiseNotOperatorMethodType]: "__luaBitwiseNotMethodBrand",
    [ExtensionKind.LengthOperatorType]: "__luaLengthBrand",
    [ExtensionKind.LengthOperatorMethodType]: "__luaLengthMethodBrand",
    [ExtensionKind.TableNewType]: "__luaTableNewBrand",
    [ExtensionKind.TableDeleteType]: "__luaTableDeleteBrand",
    [ExtensionKind.TableDeleteMethodType]: "__luaTableDeleteMethodBrand",
    [ExtensionKind.TableGetType]: "__luaTableGetBrand",
    [ExtensionKind.TableGetMethodType]: "__luaTableGetMethodBrand",
    [ExtensionKind.TableHasType]: "__luaTableHasBrand",
    [ExtensionKind.TableHasMethodType]: "__luaTableHasMethodBrand",
    [ExtensionKind.TableSetType]: "__luaTableSetBrand",
    [ExtensionKind.TableSetMethodType]: "__luaTableSetMethodBrand",
};
function isExtensionType(type, extensionKind) {
    const typeBrand = extensionKindToTypeBrand[extensionKind];
    return typeBrand !== undefined && type.getProperty(typeBrand) !== undefined;
}
exports.isExtensionType = isExtensionType;
function getExtensionKinds(type) {
    return Object.keys(extensionKindToTypeBrand).filter(e => type.getProperty(extensionKindToTypeBrand[e]) !== undefined);
}
exports.getExtensionKinds = getExtensionKinds;
function isExtensionValue(context, symbol, extensionKind) {
    var _a;
    return (symbol.getName() === extensionKindToValueName[extensionKind] &&
        ((_a = symbol.declarations) === null || _a === void 0 ? void 0 : _a.some(d => isExtensionType(context.checker.getTypeAtLocation(d), extensionKind))) === true);
}
exports.isExtensionValue = isExtensionValue;
//# sourceMappingURL=language-extensions.js.map