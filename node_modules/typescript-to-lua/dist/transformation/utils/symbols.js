"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIdentifierSymbolId = exports.trackSymbolReference = exports.getSymbolIdOfSymbol = exports.getSymbolInfo = void 0;
const utils_1 = require("../../utils");
const spread_1 = require("../visitors/spread");
const scope_1 = require("./scope");
const symbolIdCounters = new WeakMap();
function nextSymbolId(context) {
    var _a;
    const symbolId = ((_a = symbolIdCounters.get(context)) !== null && _a !== void 0 ? _a : 0) + 1;
    symbolIdCounters.set(context, symbolId);
    return symbolId;
}
const symbolInfoMap = new WeakMap();
const symbolIdMaps = new WeakMap();
function getSymbolInfo(context, symbolId) {
    return (0, utils_1.getOrUpdate)(symbolInfoMap, context, () => new Map()).get(symbolId);
}
exports.getSymbolInfo = getSymbolInfo;
function getSymbolIdOfSymbol(context, symbol) {
    return (0, utils_1.getOrUpdate)(symbolIdMaps, context, () => new Map()).get(symbol);
}
exports.getSymbolIdOfSymbol = getSymbolIdOfSymbol;
function trackSymbolReference(context, symbol, identifier) {
    const symbolIds = (0, utils_1.getOrUpdate)(symbolIdMaps, context, () => new Map());
    // Track first time symbols are seen
    let symbolId = symbolIds.get(symbol);
    if (symbolId === undefined) {
        symbolId = nextSymbolId(context);
        symbolIds.set(symbol, symbolId);
        const symbolInfo = (0, utils_1.getOrUpdate)(symbolInfoMap, context, () => new Map());
        symbolInfo.set(symbolId, { symbol, firstSeenAtPos: identifier.pos });
    }
    // If isOptimizedVarArgSpread returns true, the identifier will not appear in the resulting Lua.
    // Only the optimized ellipses (...) will be used.
    if (!(0, spread_1.isOptimizedVarArgSpread)(context, symbol, identifier)) {
        (0, scope_1.markSymbolAsReferencedInCurrentScopes)(context, symbolId, identifier);
    }
    return symbolId;
}
exports.trackSymbolReference = trackSymbolReference;
function getIdentifierSymbolId(context, identifier) {
    const symbol = context.checker.getSymbolAtLocation(identifier);
    if (symbol) {
        return trackSymbolReference(context, symbol, identifier);
    }
}
exports.getIdentifierSymbolId = getIdentifierSymbolId;
//# sourceMappingURL=symbols.js.map